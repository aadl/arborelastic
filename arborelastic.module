<?php

use Elasticsearch\ClientBuilder;

/**
 * Display help and module information
 * @return help text for section
 */
function arborelastic_help($path, $arg)
{
  $output = '';

  switch ($path) {
    case "admin/help#arborelastic":
      $output = '<p>' .  t("Custom search with Elasticsearch") . '</p>';
      break;
  }

  return $output;
}

function arborelastic_search($path_id, $query, $args = [])
{
  $search_fields = [
    'author',
    'artist',
    'bib_created',
    'callnum',
    'callnums',
    'lang',
    'pub_year',
    'pub_info',
    'series',
    'subjects',
    'title'
  ];

  // bandaid for website/communitymultimatch without _all bucket.
  $flatQuery = $query;

  // ignore colons unless part of a field query
  $is_search_field = array_filter($search_fields, function ($k) use ($query) {
    if (strpos($query, $k . ':') !== false) return true;
  });
  if (!count($is_search_field)) $query = str_replace(':', '', $query);

  if (strpos($query, '"') === false) {
    // escape these characters unless phrase search
    $search_escapes = [',', '-'];
    $search_replace = ['', ' '];
    $query = str_replace($search_escapes, $search_replace, $query);
    $fuzzy = explode(' ', $query);
    $query = [];
    foreach ($fuzzy as $fuz) {
      $query[] = (strlen($fuz) > 3 ? $fuz . '~1' : $fuz);
    }
    $query = implode(' ', $query);
  }

  $indexes = \Drupal::config('arborelastic.settings')->get('arborelastic_indexes');
  $indexes = explode("\n", $indexes);
  foreach ($indexes as $i => $index) {
    $parts = explode(':', $index);
    $indexes[$parts[0]] = array('index' => trim($parts[1]));
    unset($indexes[$i]);
  }
  $index = $indexes[$path_id]['index'];

  $hosts = [
    \Drupal::config('arborelastic.settings')->get('arborelastic_host') . ':' .  \Drupal::config('arborelastic.settings')->get('arborelastic_port'),
  ];
  $es_client = ClientBuilder::create()->setHosts($hosts)->build();
  $size = 25; // default number of results to return
  $from = 0;

  // Limit search results to active
  if ($index == 'bibs') {
    $args['active'] = $_GET['active'] ?? 1;
  }

  // Parse Args and add to query string
  foreach ($args as $field => $value) {
    if ($field == 'fbclid') {
      continue;
    }
    if ($field == 'size') {
      $size = $value;
    } elseif ($field == 'page') {
      $from = $value;
    } elseif ($field == 'sort') {
      $sort_parts = explode('~', $value);
      $sort_field = $sort_parts[0];

      // Check if keyword mapping exists for field
      $mapping = $es_client->indices()->getFieldMapping(['index' => $index, 'fields' => $sort_field]);
      $field_mapping = array_shift($mapping[$index]['mappings']);
      if (isset($field_mapping['fields']['keyword'])) {
        $sort_field .= '.keyword';
      }

      $sort = [
        $sort_field => [
          'order' => (isset($sort_parts[1]) ? $sort_parts[1] : 'desc') // Default sort decending
        ]
      ];
    } else {
      // fields to ignore adding to es query
      $field_exceptions = [
        'gridview',
        'past_events',
        'oldnews_date',
        'reading_level',
        'request_only',
        'pk_campaign',
        'pk_kwd',
        'mtm_campaign',
        'mtm_kwd'
      ];
      if ($field == 'author') {
        $query .= ' AND ' . $field . '.folded:(' . $value . ')';
      } elseif ($field == 'title') {
        $fuzzy = explode(' ', $value);
        $fuzzy_val = [];
        foreach ($fuzzy as $fuz) {
          $fuzzy_val[] = (strlen($fuz) > 3 ? $fuz . '~1' : $fuz);
        }
        $fuzzy_val = implode(' ', $fuzzy_val);
        $query .= ' AND ' . $field . '.folded:(' . $fuzzy_val . ')';
      } elseif (!in_array($field, $field_exceptions)) {
        $query .= ' AND ' . $field . ':(' . str_replace(',', ' OR ', $value) . ')';
      }
    }
  }
  if ($path_id == 'community') {
    //layered shoulds allow for use of boolean terms and operators while benefiting from multimatch. May want to reconsider query_string layering within a function in the future.
    $es_query = [
      'bool' => [
        'should' => [
          [
            'multi_match' => [
              'query' => $flatQuery,
              'fields' => ['*'],
            ]
          ],
          [
            "query_string" => [
              "query" => $query,
              "fields" => [
                "title"
              ],
              "default_operator" => "and",
              "fuzzy_prefix_length" => 3,
              "fuzziness" => 1
            ]

          ]
        ],
        'filter' => [
          [
            'terms' => [
              'mat_code' => ['photo', 'issue', 'doc', 'article', 'media', 'advertisements']
            ]
          ]
        ],
        "minimum_should_match" => 1,
      ]
    ];
    if ($args['oldnews_date']) {
      $oldnews_date = explode(',', $args['oldnews_date']);
      $es_query['bool']['must'][] = [
        'range' => [
          'oldnews_date' => [
            'gte' => strtotime('01-01-' . $oldnews_date[0]),
            'lte' => strtotime('01-01-' . $oldnews_date[1]),
            'format' => 'epoch_second'
          ]
        ]
      ];
      $sort = ['oldnews_date' => ['order' => 'asc']];
    }
  } elseif ($path_id == 'website') {
    $es_query = [
      'bool' => [
        'should' => [
          [
            'multi_match' => [
              'query' => $flatQuery,
              'fields' => ['*'],
            ]
          ],
          [
            "query_string" => [
              "query" => $query,
              "fields" => [
                "title"
              ],
              "default_operator" => "and",
              "fuzzy_prefix_length" => 3,
              "fuzziness" => 1
            ]

          ]
        ],
        'must_not' => [
          [
            'range' => [
              'field_event_end' => [
                'lte' => 'now',
                'format' => 'date_hour_minute_second'
              ]
            ]
          ]
        ],
        'filter' => [
          [
            'terms' => [
              'mat_code' => ['page', 'story', 'pub_event', 'media']
            ]
          ]
        ],
        "minimum_should_match" => 1,
      ]
    ];
    if ($args['past_events']) {
      unset($es_query['bool']['must_not']);
    }
    if (isset($args['mat_code'])) {
      if ($args['mat_code'] == 'pub_event') {
        $sort = ['field_event_start' => ['order' => 'asc']];
      }
    }
  } else {
    $es_query = [
      'function_score' => [
        'query' => [
          'bool' => [
            // the extra layer of array brackets is so we can add more to the must/should conditions
            'must' => [
              [
                'query_string' => [
                  'query' => $query,
                  'fields' => ['title.folded^20', 'author.folded^10', 'artist.folded^10', 'callnum', 'callnums', 'subjects', 'series', 'addl_author'],
                  'default_operator' => 'and'
                ]
              ]
            ],
            'should' => [
              [
                'match' => [
                  'lang' => [
                    'query' => 'eng',
                    'boost' => 300
                  ]
                ]
              ],
              [
                // this is used to boost exact matches higher
                'query_string' => [
                  'query' => str_replace('~1', '', $query),
                  'fields' => ['title^20', 'author^15', 'artist^15'],
                  'default_operator' => 'and'
                ]
              ]
            ]
          ]
        ],
        'field_value_factor' => [
          'field' => 'popular_alltime',
          'modifier' => 'log1p',
          'missing' => 1
        ]
      ]
    ];
    if (isset($args['reading_level'])) {
      if (intval($args['reading_level'])) {
        $es_query['function_score']['query']['bool']['must'][] = [
          'range' => [
            'reading_level.lexile' => [
              'gte' => $args['reading_level'],
              'lte' => $args['reading_level'] + 99
            ]
          ]
        ];
      } else {
        $es_query['function_score']['query']['bool']['filter'] = [
          'term' => [
            'reading_level.aaps' => $args['reading_level']
          ]
        ];
      }
    }
    if (isset($args['request_only'])) {
      $es_query['function_score']['query']['bool']['must'][] = [
        'term' => [
          'flags.request_only' => $args['request_only']
        ]
      ];
    }
  }

  $params = [
    'index' => $index,
    'from' => $from * $size,
    'body' => [
      'size' => $size,
      'query' => $es_query,
      'aggs' => [
        'mat_code' => [
          'terms' => [
            'field' => 'mat_code.keyword'
          ]
        ],
        'lang' => [
          'terms' => [
            'field' => 'lang.keyword'
          ]
        ]
      ]
    ]
  ];
  if (isset($sort)) {
    $params['body']['sort'] = $sort;
  }

  try {
    $result = $es_client->search($params);
  } catch (\Exception $e) {
    $result = [
      'error' => 'Elasticsearch Query Failed',
      'message' => $e->getMessage(),
    ];
  }

  $result['cur_page'] = $from;
  $result['size'] = $size;
  return $result;
}

function arborelastic_theme($existing, $theme, $path)
{
  return [
    'search_results' => [
      'variables' => [
        'path_id' => NULL,
        'api_key' => NULL,
        'lists' => NULL,
        'results' => NULL,
        'facets' => NULL,
        'gridview' => NULL,
        'pager' => NULL
      ]
    ]
  ];
}
