<?php

use Elasticsearch\ClientBuilder;

/**
 * Display help and module information
 * @return help text for section
 */
function arborelastic_help($path, $arg) {
  $output = '';

  switch ($path) {
    case "admin/help#arborelastic":
      $output = '<p>' .  t("Custom search with Elasticsearch") . '</p>';
      break;
  }

  return $output;
}

function arborelastic_search($path_id, $query, $args = []) {
  $indexes = \Drupal::config('arborelastic.settings')->get('arborelastic_indexes');
  $indexes = explode("\n", $indexes);
  foreach ($indexes as $i => $index) {
    $parts = explode(':', $index);
    $indexes[$parts[0]] = array('index' => $parts[1], 'type' => $parts[2]);
    unset($indexes[$i]);
  }
  $index = $indexes[$path_id]['index'];

  $hosts = [
    [
      'host' => \Drupal::config('arborelastic.settings')->get('arborelastic_host'),
      'port' => \Drupal::config('arborelastic.settings')->get('arborelastic_port'),
      'user' => \Drupal::config('arborelastic.settings')->get('arborelastic_user'),
      'pass' => \Drupal::config('arborelastic.settings')->get('arborelastic_pass'),
    ]
  ];

  $es_client = ClientBuilder::create()->setHosts($hosts)->build();

  $size = 25; // default number of results to return
  $from = 0;

  // Parse Args and add to query string
  foreach ($args as $field => $value) {
    if ($field == 'size') {
      $size = $value;
    }
    elseif ($field == 'page') {
      $from = $value;
    }
    elseif ($field == 'sort') {
      $sort_parts = explode('~', $value);
      $sort_field = $sort_parts[0];

      // Check if keyword mapping exists for field
      $mapping = $es_client->indices()->getFieldMapping(['index' => $index, 'field' => $sort_field]);
      $type_mapping = array_shift($mapping[$index]['mappings']);
      $field_mapping = $type_mapping[$sort_field]['mapping'][$sort_field];
      if (isset($field_mapping['fields']['keyword'])) {
        $sort_field .= '.keyword';
      }

      $sort = [
        $sort_field => [
          'order' => (isset($sort_parts[1]) ? $sort_parts[1] : 'desc') // Default sort decending
        ]
      ];
    }
    else {
      if ($field != 'gridview') {
        $query .= ' AND ' . $field . ':(' . str_replace(',', ' OR ', $value) . ')';
      }
    }
  }

  $es_query = [
    'query_string' => [
      'query' => $query,
      'fields' => ['_all']
    ]
  ];


  $params = [
    'index' => $index,
    'from' => $from * $size,
    'body' => [
      'size' => $size,
      'query' => $es_query,
      'aggs' => [
        'mat_code' => [
          'terms' => [
            'field' => 'mat_code.keyword'
          ]
        ]
      ]
    ]
  ];

  if (isset($sort)) {
    $params['body']['sort'] = $sort;
  }

  try {
    $result = $es_client->search($params);
  }
  catch (\Exception $e) {
    $result = [
      'error' => 'Elasticsearch Query Failed',
      'message' => $e->getMessage(),
    ];
  }

  $result['cur_page'] = $from;
  $result['size'] = $size;

  return $result;
}

function arborelastic_theme($existing, $type, $theme, $path) {
  return [
    'search_results' => [
      'variables' => [
        'api_key' => NULL,
        'lists' => NULL,
        'results' => NULL,
        'facets' => NULL,
        'gridview' => NULL
      ]
    ]
  ];
}
